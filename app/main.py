import contextlib
import duckdb
import logging
import typer
import uvicorn

from fastapi import FastAPI
from sqlalchemy import create_engine, text
from sqlalchemy.engine import Engine
from sqlalchemy.exc import SQLAlchemyError
from typing import Iterator
from typing_extensions import Annotated

from app.core.config import etl_settings, TableConfig
from app.utils.logger import setup_logging
from app.etl import state, extract, transform
from app.etl.load import ParquetLoader, prepare_destination, refresh_duckdb_table

setup_logging("configs/logger.yaml")
logger = logging.getLogger(__name__)

cli_app = typer.Typer()
api_app = FastAPI(title="iCount-People API", version="1.0.0")

# --- Context Manager ƒë·ªÉ qu·∫£n l√Ω k·∫øt n·ªëi ---
@contextlib.contextmanager
def database_connections() -> Iterator[tuple[Engine, duckdb.DuckDBPyConnection]]:
    """
    Context manager ƒë·ªÉ qu·∫£n l√Ω v√≤ng ƒë·ªùi c·ªßa k·∫øt n·ªëi SQL Server v√† DuckDB.
    ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë∆∞·ª£c thi·∫øt l·∫≠p v√† ƒë√≥ng m·ªôt c√°ch an to√†n.
    """
    sql_engine, duckdb_conn = None, None
    try:
        # K·∫øt n·ªëi SQL Server
        sql_engine = create_engine(etl_settings.db.sqlalchemy_db_uri, pool_pre_ping=True)
        with sql_engine.connect() as connection:
            connection.execute(text("SELECT 1"))
        logger.info("K·∫øt n·ªëi SQL Server th√†nh c√¥ng.")

        # K·∫øt n·ªëi DuckDB
        duckdb_path = str(etl_settings.DUCKDB_PATH.resolve())
        duckdb_conn = duckdb.connect(database=duckdb_path, read_only=False)
        logger.info(f"K·∫øt n·ªëi DuckDB ('{duckdb_path}') th√†nh c√¥ng.")

        yield sql_engine, duckdb_conn

    except SQLAlchemyError as e:
        logger.critical(f"L·ªói nghi√™m tr·ªçng khi k·∫øt n·ªëi SQL Server: {e}", exc_info=True)
        raise
    except duckdb.Error as e:
        logger.critical(f"L·ªói nghi√™m tr·ªçng khi k·∫øt n·ªëi DuckDB: {e}", exc_info=True)
        raise
    finally:
        if sql_engine:
            sql_engine.dispose()
            logger.info("ƒê√£ ƒë√≥ng k·∫øt n·ªëi SQL Server.")
        if duckdb_conn:
            duckdb_conn.close()
            logger.info("ƒê√£ ƒë√≥ng k·∫øt n·ªëi DuckDB.")

# --- C√°c h√†m x·ª≠ l√Ω ETL (gi·ªØ nguy√™n logic g·ªëc) ---
def _process_table(sql_engine: Engine, duckdb_conn: duckdb.DuckDBPyConnection, config: TableConfig, etl_state: dict):
    logger.info(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω b·∫£ng: '{config.source_table}' -> '{config.dest_table}' (Incremental: {config.incremental})")
    prepare_destination(config)
    last_timestamp = state.get_last_timestamp(etl_state, config.dest_table)
    data_iterator = extract.from_sql_server(sql_engine, config, last_timestamp)

    total_rows, max_ts_in_run = 0, None
    try:
        with ParquetLoader(config) as loader:
            for chunk in data_iterator:
                if chunk.empty: continue
                transformed_chunk = transform.run_transformations(chunk, config)
                if transformed_chunk.empty: continue

                loader.write_chunk(transformed_chunk)
                total_rows += len(transformed_chunk)

                current_max_ts = transform.get_max_timestamp(transformed_chunk, config)
                if current_max_ts and (max_ts_in_run is None or current_max_ts > max_ts_in_run):
                    max_ts_in_run = current_max_ts
        
        if total_rows > 0:
            logger.info(f"ƒê√£ x·ª≠ l√Ω {total_rows} d√≤ng. B·∫Øt ƒë·∫ßu t·∫£i v√†o DuckDB.")
            refresh_duckdb_table(duckdb_conn, config, loader.has_written_data)
            logger.info(f"ƒê√£ t·∫£i th√†nh c√¥ng d·ªØ li·ªáu v√†o b·∫£ng DuckDB '{config.dest_table}'.")
            if config.incremental and max_ts_in_run:
                state.update_timestamp(etl_state, config.dest_table, max_ts_in_run)
        else:
            logger.info(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu m·ªõi cho b·∫£ng '{config.dest_table}'.")

    except Exception as e:
        logger.error(f"L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω cho b·∫£ng '{config.dest_table}': {e}", exc_info=True)
        raise # N√©m l·∫°i l·ªói ƒë·ªÉ v√≤ng l·∫∑p ch√≠nh b·∫Øt v√† ƒë√°nh d·∫•u l√† failed

# --- C√°c l·ªánh CLI ---
@cli_app.command()
def run_etl():
    """Ch·∫°y quy tr√¨nh ETL ho√†n ch·ªânh t·ª´ SQL Server sang DuckDB."""
    logger.info("="*60)
    logger.info("B·∫ÆT ƒê·∫¶U QUY TR√åNH ETL")
    logger.info("="*60)

    succeeded_tables, failed_tables = [], []
    etl_state = state.load_etl_state()

    try:
        with database_connections() as (sql_engine, duckdb_conn):
            for table_name, config in etl_settings.TABLE_CONFIG.items():
                try:
                    _process_table(sql_engine, duckdb_conn, config, etl_state)
                    state.save_etl_state(etl_state) # L∆∞u tr·∫°ng th√°i sau m·ªói b·∫£ng th√†nh c√¥ng
                    succeeded_tables.append(config.source_table)
                    logger.info(f"‚úÖ X·ª≠ l√Ω th√†nh c√¥ng b·∫£ng '{config.source_table}'.\n")
                except Exception:
                    # L·ªói ƒë√£ ƒë∆∞·ª£c log b√™n trong _process_table, ch·ªâ c·∫ßn ƒë√°nh d·∫•u th·∫•t b·∫°i
                    failed_tables.append(config.source_table)
                    logger.error(f"‚ùå X·ª≠ l√Ω b·∫£ng '{config.source_table}' th·∫•t b·∫°i. Chuy·ªÉn sang b·∫£ng ti·∫øp theo.\n")
                    continue
    except Exception as e:
        logger.critical(f"Quy tr√¨nh ETL b·ªã d·ª´ng do l·ªói k·∫øt n·ªëi ho·∫∑c l·ªói nghi√™m tr·ªçng kh√°c: {e}")
    finally:
        # In ra b·∫£n t√≥m t·∫Øt k·∫øt qu·∫£
        logger.info("="*60)
        logger.info("T√ìM T·∫ÆT K·∫æT QU·∫¢ ETL")
        logger.info(f"T·ªïng s·ªë b·∫£ng c·∫•u h√¨nh: {len(etl_settings.TABLE_CONFIG)}")
        logger.info(f"‚úÖ Th√†nh c√¥ng: {len(succeeded_tables)}")
        logger.info(f"‚ùå Th·∫•t b·∫°i: {len(failed_tables)}")
        if failed_tables:
            logger.warning(f"Danh s√°ch b·∫£ng th·∫•t b·∫°i: {', '.join(failed_tables)}")
        logger.info("="*60)

@api_app.get("/", include_in_schema=False)
def read_root():
    return {"message": "Ch√†o m·ª´ng ƒë·∫øn v·ªõi iCount-People API"}

@cli_app.command()
def serve(
    host: Annotated[str, typer.Option(help="Host ƒë·ªÉ ch·∫°y server.")] = "127.0.0.1",
    port: Annotated[int, typer.Option(help="Port ƒë·ªÉ ch·∫°y server.")] = 8000,
    reload: Annotated[bool, typer.Option(help="T·ª± ƒë·ªông t·∫£i l·∫°i server khi c√≥ thay ƒë·ªïi.")] = True
):
    """Kh·ªüi ch·∫°y web server Uvicorn cho ·ª©ng d·ª•ng FastAPI."""
    logger.info(f"üöÄ Kh·ªüi ch·∫°y FastAPI server t·∫°i http://{host}:{port}")
    uvicorn.run("app.main:api_app", host=host, port=port, reload=reload)

if __name__ == "__main__":
    cli_app()
