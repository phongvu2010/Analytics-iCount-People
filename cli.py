"""
Giao di·ªán d√≤ng l·ªánh (Command-Line Interface - CLI) ch√≠nh c·ªßa ·ª©ng d·ª•ng.

File n√†y s·ª≠ d·ª•ng Typer ƒë·ªÉ t·∫°o ra c√°c l·ªánh gi√∫p t∆∞∆°ng t√°c v·ªõi ·ª©ng d·ª•ng m·ªôt
c√°ch th√¢n thi·ªán, bao g·ªìm:
- Ch·∫°y quy tr√¨nh ETL ho√†n ch·ªânh (`run-etl`).
- Kh·ªüi ch·∫°y m√°y ch·ªß web FastAPI (`serve`).

ƒê√¢y l√† ƒëi·ªÉm kh·ªüi ƒë·∫ßu (entrypoint) cho c√°c t√°c v·ª• v·∫≠n h√†nh v√† qu·∫£n l√Ω ·ª©ng d·ª•ng.
"""
import contextlib
import duckdb
import logging
import pandera.errors as pa_errors
import typer
import uvicorn

from duckdb import DuckDBPyConnection, Error as DuckdbError
from sqlalchemy import create_engine, text
from sqlalchemy.engine import Engine
from sqlalchemy.exc import SQLAlchemyError
from tenacity import retry, stop_after_attempt, wait_fixed, before_sleep_log, retry_if_exception
from typing import Iterator
from typing_extensions import Annotated

from app.core.config import settings, TableConfig
from app.etl import extract, state, transform
from app.etl.load import ParquetLoader, prepare_destination, refresh_duckdb_table
from app.utils.logger import setup_logging

# C·∫•u h√¨nh logging ngay khi ·ª©ng d·ª•ng kh·ªüi ch·∫°y.
setup_logging('configs/logger.yaml')
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o Typer App ƒë·ªÉ qu·∫£n l√Ω c√°c c√¢u l·ªánh CLI.
cli_app = typer.Typer()


@contextlib.contextmanager
def _get_database_connections() -> Iterator[tuple[Engine, DuckDBPyConnection]]:
    """
    Context manager ƒë·ªÉ qu·∫£n l√Ω v√≤ng ƒë·ªùi c·ªßa c√°c k·∫øt n·ªëi database.

    T·ª± ƒë·ªông thi·∫øt l·∫≠p k·∫øt n·ªëi ƒë·∫øn MS SQL Server v√† DuckDB khi b·∫Øt ƒë·∫ßu
    v√† ƒë·∫£m b·∫£o ch√∫ng ƒë∆∞·ª£c ƒë√≥ng l·∫°i m·ªôt c√°ch an to√†n khi k·∫øt th√∫c,
    ngay c·∫£ khi c√≥ l·ªói x·∫£y ra.

    Yields:
        M·ªôt tuple ch·ª©a SQLAlchemy engine v√† k·∫øt n·ªëi DuckDB.

    Raises:
        SQLAlchemyError: N·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn SQL Server.
        DuckDBError: N·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn DuckDB.
    """
    sql_engine, duckdb_conn = None, None
    try:
        # 1. K·∫øt n·ªëi SQL Server
        logger.info("ƒêang thi·∫øt l·∫≠p k·∫øt n·ªëi t·ªõi MS SQL Server...")
        sql_engine = create_engine(settings.db.sqlalchemy_db_uri, pool_pre_ping=True)
        with sql_engine.connect() as connection:
            connection.execute(text('SELECT 1')) # Ping ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
        logger.info("‚úÖ K·∫øt n·ªëi SQL Server th√†nh c√¥ng.")

        # 2. K·∫øt n·ªëi DuckDB
        logger.info("ƒêang thi·∫øt l·∫≠p k·∫øt n·ªëi t·ªõi DuckDB...")
        duckdb_path = str(settings.DUCKDB_PATH.resolve())
        duckdb_conn = duckdb.connect(database=duckdb_path, read_only=False)
        logger.info(f"‚úÖ K·∫øt n·ªëi DuckDB ('{duckdb_path}') th√†nh c√¥ng.\n")

        yield sql_engine, duckdb_conn

    except SQLAlchemyError as e:
        logger.critical(f"‚ùå L·ªói nghi√™m tr·ªçng khi k·∫øt n·ªëi SQL Server: {e}", exc_info=True)
        raise

    except DuckdbError as e:
        logger.critical(f"‚ùå L·ªói nghi√™m tr·ªçng khi k·∫øt n·ªëi DuckDB: {e}", exc_info=True)
        raise

    finally:
        # 3. ƒê√≥ng k·∫øt n·ªëi an to√†n
        if sql_engine:
            sql_engine.dispose()
            logger.info("K·∫øt n·ªëi SQL Server ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.")
        if duckdb_conn:
            duckdb_conn.close()
            logger.info("K·∫øt n·ªëi DuckDB ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.")


# --- T√çCH H·ª¢P C∆† CH·∫æ RETRY ---
# Decorator @retry s·∫Ω bao b·ªçc h√†m _process_table.
# - stop_after_attempt(3): Th·ª≠ l·∫°i t·ªëi ƒëa 3 l·∫ßn (1 l·∫ßn ƒë·∫ßu + 2 l·∫ßn th·ª≠ l·∫°i).
# - wait_fixed(15): Ch·ªù 15 gi√¢y gi·ªØa m·ªói l·∫ßn th·ª≠ l·∫°i.
# - before_sleep_log: T·ª± ƒë·ªông ghi log c·∫£nh b√°o tr∆∞·ªõc m·ªói l·∫ßn th·ª≠ l·∫°i.
# - retry_on_exception: Ch·ªâ th·ª≠ l·∫°i n·∫øu g·∫∑p c√°c l·ªói li√™n quan ƒë·∫øn DB/IO,
#   kh√¥ng th·ª≠ l·∫°i v·ªõi c√°c l·ªói logic d·ªØ li·ªáu nh∆∞ Pandera.
def is_retryable_exception(exception: BaseException) -> bool:
    """H√†m ki·ªÉm tra xem l·ªói c√≥ n√™n ƒë∆∞·ª£c retry hay kh√¥ng."""
    return isinstance(exception, (SQLAlchemyError, DuckdbError, IOError))


@retry(
    stop=stop_after_attempt(3),
    wait=wait_fixed(15),
    before_sleep=before_sleep_log(logger, logging.WARNING),
    retry=retry_if_exception(is_retryable_exception)
)
def _process_table(
    sql_engine: Engine,
    duckdb_conn: DuckDBPyConnection,
    config: TableConfig,
    etl_state: dict
):
    """
    Th·ª±c hi·ªán to√†n b·ªô pipeline ETL cho m·ªôt b·∫£ng duy nh·∫•t (E -> T -> L).
    H√†m n√†y ƒë∆∞·ª£c tƒÉng c∆∞·ªùng v·ªõi c∆° ch·∫ø t·ª± ƒë·ªông th·ª≠ l·∫°i khi g·∫∑p l·ªói k·∫øt n·ªëi.

    Args:
        sql_engine: SQLAlchemy engine ƒë√£ k·∫øt n·ªëi.
        duckdb_conn: K·∫øt n·ªëi DuckDB ƒëang ho·∫°t ƒë·ªông.
        config: ƒê·ªëi t∆∞·ª£ng c·∫•u h√¨nh cho b·∫£ng ƒëang x·ª≠ l√Ω.
        etl_state: Dictionary ch·ª©a tr·∫°ng th√°i (high-water mark) c·ªßa ETL.
    """
    logger.info(
        f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω b·∫£ng: '{config.source_table}' -> "
        f"'{config.dest_table}' (Incremental: {config.incremental})"
    )
    prepare_destination(config) # 1. Chu·∫©n b·ªã th∆∞ m·ª•c staging
    last_timestamp = state.get_last_timestamp(etl_state, config.dest_table)
    data_iterator = extract.from_sql_server(sql_engine, config, last_timestamp) # 2. Extract

    total_rows, max_ts_in_run = 0, None

    # Gi·ªØ kh·ªëi try...except ƒë·ªÉ b·∫Øt l·ªói sau khi ƒë√£ retry h·∫øt s·ªë l·∫ßn
    try:
        with ParquetLoader(config) as loader:
            for chunk in data_iterator:
                # 3. Transform & Validate
                transformed_chunk = transform.run_transformations(chunk, config)
                if transformed_chunk.empty:
                    continue

                # 4. Load v√†o staging (Parquet)
                loader.write_chunk(transformed_chunk)
                total_rows += len(transformed_chunk)

                # C·∫≠p nh·∫≠t high-water mark cho l·∫ßn ch·∫°y hi·ªán t·∫°i
                current_max_ts = transform.get_max_timestamp(transformed_chunk, config)
                if current_max_ts and (max_ts_in_run is None or current_max_ts > max_ts_in_run):
                    max_ts_in_run = current_max_ts

        # 5. Load t·ª´ Parquet v√†o DuckDB
        if total_rows > 0:
            logger.info(f"ƒê√£ x·ª≠ l√Ω {total_rows} d√≤ng. B·∫Øt ƒë·∫ßu t·∫£i v√†o DuckDB.")
            refresh_duckdb_table(duckdb_conn, config, loader.has_written_data)
            logger.info(f"ƒê√£ t·∫£i th√†nh c√¥ng d·ªØ li·ªáu v√†o DuckDB '{config.dest_table}'.")

            # 6. C·∫≠p nh·∫≠t state n·∫øu l√† incremental load
            if config.incremental and max_ts_in_run:
                state.update_timestamp(etl_state, config.dest_table, max_ts_in_run)
        else:
            logger.info(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu m·ªõi cho '{config.dest_table}'.")

    # B·∫Øt c√°c l·ªói kh√¥ng th·ªÉ retry (v√≠ d·ª•: l·ªói validation) ho·∫∑c l·ªói sau khi ƒë√£ retry h·∫øt
    except pa_errors.SchemaErrors as e:
        logger.error(f"‚ùå L·ªói validation d·ªØ li·ªáu kh√¥ng th·ªÉ retry cho '{config.source_table}': {e}", exc_info=True)
        raise # N√©m l·∫°i l·ªói ƒë·ªÉ v√≤ng l·∫∑p ch√≠nh b·∫Øt ƒë∆∞·ª£c

    except Exception as e:
        logger.error(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng th·ªÉ ph·ª•c h·ªìi sau c√°c l·∫ßn th·ª≠ l·∫°i cho '{config.source_table}': {e}", exc_info=True)
        raise


@cli_app.command()
def run_etl():
    """
    Ch·∫°y quy tr√¨nh ETL ho√†n ch·ªânh t·ª´ SQL Server sang DuckDB.
    """
    logger.info("=" * 60)
    logger.info("üöÄ B·∫ÆT ƒê·∫¶U QUY TR√åNH ETL")
    logger.info("=" * 60)

    succeeded, failed = [], []
    etl_state = state.load_etl_state()

    # S·∫Øp x·∫øp c√°c b·∫£ng theo th·ª© t·ª± x·ª≠ l√Ω ƒë√£ ƒë·ªãnh nghƒ©a trong config.
    tables_to_process = sorted(
        settings.TABLE_CONFIG.items(),
        key=lambda item: item[1].processing_order
    )

    try:
        with _get_database_connections() as (sql_engine, duckdb_conn):
            for table_name, config in tables_to_process:
                try:
                    # L·∫ßn g·ªçi n√†y ƒë√£ ƒë∆∞·ª£c b·ªçc b·ªüi c∆° ch·∫ø retry
                    _process_table(sql_engine, duckdb_conn, config, etl_state)
                    state.save_etl_state(etl_state) # L∆∞u state sau m·ªói b·∫£ng th√†nh c√¥ng
                    succeeded.append(config.source_table)
                    logger.info(f"‚úÖ X·ª≠ l√Ω th√†nh c√¥ng '{config.source_table}'.\n")
                except Exception:
                    # Exception ·ªü ƒë√¢y nghƒ©a l√† h√†m ƒë√£ retry h·∫øt s·ªë l·∫ßn m√† v·∫´n l·ªói
                    failed.append(config.source_table)
                    logger.error(f"‚ùå X·ª≠ l√Ω '{config.source_table}' th·∫•t b·∫°i. " f"Chuy·ªÉn sang b·∫£ng ti·∫øp theo.\n")
                    continue # B·ªè qua b·∫£ng b·ªã l·ªói v√† ti·∫øp t·ª•c

    except Exception as e:
        logger.critical(f"Quy tr√¨nh ETL b·ªã d·ª´ng do l·ªói k·∫øt n·ªëi ban ƒë·∫ßu: {e}")

    finally:
        logger.info("=" * 60)
        logger.info("üìä T√ìM T·∫ÆT K·∫æT QU·∫¢ ETL")
        logger.info(f"T·ªïng s·ªë b·∫£ng: {len(settings.TABLE_CONFIG)}")
        logger.info(f"‚úÖ Th√†nh c√¥ng: {len(succeeded)}")
        logger.info(f"‚ùå Th·∫•t b·∫°i: {len(failed)}")
        if failed:
            logger.warning(f"Danh s√°ch b·∫£ng th·∫•t b·∫°i: {', '.join(failed)}")
        logger.info("=" * 60 + "\n")


@cli_app.command()
def serve(
    host: Annotated[str, typer.Option(help="Host ƒë·ªÉ ch·∫°y server.")] = '127.0.0.1',
    port: Annotated[int, typer.Option(help="Port ƒë·ªÉ ch·∫°y server.")] = 8000,
    reload: Annotated[bool, typer.Option(help="T·ª± ƒë·ªông t·∫£i l·∫°i khi code thay ƒë·ªïi.")] = True,
):
    """
    Kh·ªüi ch·∫°y web server Uvicorn cho ·ª©ng d·ª•ng FastAPI.
    """
    logger.info(f"üöÄ Kh·ªüi ch·∫°y FastAPI server t·∫°i http://{host}:{port}")
    uvicorn.run(
        'app.main:api_app',
        host=host,
        port=port,
        reload=reload,
        reload_dirs=['app', 'configs', 'template'] # Ch·ªâ ƒë·ªãnh r√µ th∆∞ m·ª•c c·∫ßn theo d√µi
    )


if __name__ == '__main__':
    cli_app()
